!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ISR	dev/sand.cpp	/^ISR(__vector_TIMER1_COMPA_vect, ISR_NAKED)$/;"	f
ISR	sys/kernel.cpp	/^ISR(BADISR_vect)$/;"	f
ISR	sys/kernel.cpp	/^ISR(TIMER1_COMPA_vect, ISR_NAKED)$/;"	f
MAX_ARGUMENTS	sys/sh.cpp	1;"	d	file:
MAX_NUMBER_OF_TASKS	sys/kernel.h	1;"	d
MAX_TASK_DEFS	sys/tasks.cpp	1;"	d	file:
MAX_TASK_NAME_LEN	sys/tasks.cpp	2;"	d	file:
READY	dev/sand.cpp	8;"	d	file:
RUNNING	dev/sand.cpp	9;"	d	file:
SERIAL_BAUD_RATE	sys/serial.cpp	2;"	d	file:
SERIAL_BUF_SIZE	sys/serial.cpp	1;"	d	file:
SH_ARGSBUF_MAX	sys/sh.cpp	2;"	d	file:
STOPPED	dev/sand.cpp	10;"	d	file:
TERMINATED	dev/sand.cpp	7;"	d	file:
_Z4loopv	dev/sand.s	/^_Z4loopv:$/;"	l
_Z5setupv	dev/sand.s	/^_Z5setupv:$/;"	l
_Z8testFuncv	dev/sand.s	/^_Z8testFuncv:$/;"	l
__SP_H__	dev/sand.s	/^__SP_H__ = 0x3e$/;"	d
__SP_L__	dev/sand.s	/^__SP_L__ = 0x3d$/;"	d
__SREG__	dev/sand.s	/^__SREG__ = 0x3f$/;"	d
__tmp_reg__	dev/sand.s	/^__tmp_reg__ = 0$/;"	d
__vector_TIMER1_COMPA_vect	dev/sand.s	/^__vector_TIMER1_COMPA_vect:$/;"	l
__zero_reg__	dev/sand.s	/^__zero_reg__ = 1$/;"	d
argsBuf	sys/sh.cpp	/^	char argsBuf[SH_ARGSBUF_MAX][SERIAL_BUF_SIZE];$/;"	m	struct:sh	file:
contextPop	dev/sand.cpp	48;"	d	file:
contextPop	sys/kernel.cpp	41;"	d	file:
contextPush	dev/sand.cpp	12;"	d	file:
contextPush	sys/kernel.cpp	5;"	d	file:
edit	sys/sh.cpp	/^unsigned char edit(char* file)$/;"	f
exec	sys/sh.cpp	/^	void (*exec)(char*, uint8_t);$/;"	m	struct:sh	file:
footer	sys/kernel.h	/^	char footer[strlen(kernelFooter)+1];$/;"	m	struct:kernel
footer	sys/kernel.h	/^	char footer[strlen(taskFooter)+1];$/;"	m	struct:task
fp	sys/tasks.cpp	/^	void (*fp)(void*, uint16_t, char*);$/;"	m	struct:taskDef	file:
getInput	sys/sh.cpp	/^	void (*getInput)(char*, uint8_t);$/;"	m	struct:sh	file:
header	sys/kernel.h	/^	char header[strlen(kernelHeader)+1];$/;"	m	struct:kernel
header	sys/kernel.h	/^	char header[strlen(taskHeader)+1];$/;"	m	struct:task
hi8	dev/sand.cpp	5;"	d	file:
hi8	sys/kernel.cpp	3;"	d	file:
isAlphanumeric	sys/sh.cpp	/^uint8_t isAlphanumeric(char c)$/;"	f
kernel	sys/kernel.h	/^kernel_T kernel;$/;"	v
kernel	sys/kernel.h	/^typedef struct kernel$/;"	s
kernelFooter	sys/kernel.h	/^const char kernelFooter[] = "kernel footer";$/;"	v
kernelHeader	sys/kernel.h	/^const char kernelHeader[] = "kernel header";$/;"	v
kernelInit	sys/kernel.cpp	/^void kernelInit(uint16_t stackReserve)$/;"	f
kernel_T	sys/kernel.h	/^}kernel_T;$/;"	t	typeref:struct:kernel
lo8	dev/sand.cpp	4;"	d	file:
lo8	sys/kernel.cpp	2;"	d	file:
loop	dev/sand.cpp	/^void loop()$/;"	f
memptr	sys/kernel.h	/^	void* memptr; \/\/pointer to bottom of stack$/;"	m	struct:kernel
name	sys/tasks.cpp	/^	char name[MAX_TASK_NAME_LEN];$/;"	m	struct:taskDef	file:
nbrOfTaskDefs	sys/tasks.cpp	/^	uint8_t nbrOfTaskDefs;$/;"	m	struct:taskDefs	file:
nbrOfTasks	sys/kernel.h	/^	uint8_t nbrOfTasks;$/;"	m	struct:kernel
panic	sys/kernel.cpp	/^void panic()$/;"	f
ramDump	sys/sh.cpp	/^void ramDump()$/;"	f
raw	sys/kernel.h	/^	raw,$/;"	e	enum:state
ready	sys/kernel.h	/^	ready,$/;"	e	enum:state
running	sys/kernel.h	/^	running,$/;"	e	enum:state
running	sys/kernel.h	/^	uint8_t running;$/;"	m	struct:kernel
sTop	sys/kernel.h	/^	void* sTop;$/;"	m	struct:task
serialFlush	sys/serial.cpp	/^void serialFlush()$/;"	f
serialPrint	sys/serial.cpp	14;"	d	file:
serialRead	sys/serial.cpp	/^void serialRead(char* buf, unsigned char bufSize)$/;"	f
setup	dev/sand.cpp	/^void setup()$/;"	f
sh	sys/sh.cpp	/^sh_T sh;$/;"	v
sh	sys/sh.cpp	/^typedef struct sh$/;"	s	file:
shExec	sys/sh.cpp	/^void shExec(char* buf, uint8_t bufSize)$/;"	f
shGetInput	sys/sh.cpp	/^void shGetInput(char* buf, uint8_t bufSize)$/;"	f
shInit	sys/kernel.h	/^	void (*shInit)();$/;"	m	struct:kernel
shInit_	sys/sh.cpp	/^void shInit_()$/;"	f
sh_T	sys/sh.cpp	/^} sh_T;$/;"	t	typeref:struct:sh	file:
sp	sys/kernel.h	/^	void* sp; \/\/stack pointer$/;"	m	struct:task
state	sys/kernel.h	/^	state_T state;$/;"	m	struct:task
state	sys/kernel.h	/^typedef enum state$/;"	g
state_T	sys/kernel.h	/^} state_T;$/;"	t	typeref:enum:state
stopped	sys/kernel.h	/^	stopped$/;"	e	enum:state
task	sys/kernel.h	/^typedef struct task$/;"	s
task	sys/tasks.cpp	/^	taskDef_T task[MAX_TASK_DEFS];$/;"	m	struct:taskDefs	file:
taskCreate	sys/kernel.h	/^	void (*taskCreate)(void(*)(void*), uint16_t, char*);$/;"	m	struct:kernel
taskCreate_	sys/kernel.cpp	/^void taskCreate_(void(* func)(void*), uint16_t stacksize, char* args)$/;"	f
taskDef	sys/tasks.cpp	/^typedef struct taskDef{$/;"	s	file:
taskDef_T	sys/tasks.cpp	/^} taskDef_T;$/;"	t	typeref:struct:taskDef	file:
taskDefs	sys/tasks.cpp	/^taskDefs_T taskDefs;$/;"	v
taskDefs	sys/tasks.cpp	/^typedef struct taskDefs{$/;"	s	file:
taskDefsInit	sys/sh.cpp	/^	void (*taskDefsInit)();$/;"	m	struct:sh	file:
taskDefsInit	sys/tasks.cpp	/^void taskDefsInit()$/;"	f
taskDefs_T	sys/tasks.cpp	/^} taskDefs_T;$/;"	t	typeref:struct:taskDefs	file:
taskDestroy	sys/kernel.h	/^	void (*taskDestroy)(uint8_t);$/;"	m	struct:kernel
taskDestroy_	sys/kernel.cpp	/^void taskDestroy_(uint8_t taskNumber)$/;"	f
taskFooter	sys/kernel.h	/^const char taskFooter[] = "task footer";$/;"	v
taskHeader	sys/kernel.h	/^const char taskHeader[] = "task header";$/;"	v
taskRaw2Running	sys/kernel.h	/^	void (*taskRaw2Running)(uint8_t);$/;"	m	struct:kernel
taskRaw2Running_	sys/kernel.cpp	/^void taskRaw2Running_(uint8_t taskNumber)$/;"	f
taskReady2Running	sys/kernel.h	/^	void (*taskReady2Running)(uint8_t);$/;"	m	struct:kernel
taskReady2Running_	sys/kernel.cpp	/^void taskReady2Running_(uint8_t taskNumber)$/;"	f
taskResume	sys/kernel.h	/^	void (*taskResume)(uint8_t);$/;"	m	struct:kernel
taskResume_	sys/kernel.cpp	/^void taskResume_(uint8_t taskNumber)$/;"	f
taskRunning2Ready	sys/kernel.h	/^	void (*taskRunning2Ready)(uint8_t);$/;"	m	struct:kernel
taskRunning2Ready_	sys/kernel.cpp	/^void taskRunning2Ready_(uint8_t taskNumber)$/;"	f
taskStop	sys/kernel.h	/^	void (*taskStop)(uint8_t);$/;"	m	struct:kernel
taskStop_	sys/kernel.cpp	/^void taskStop_(uint8_t taskNumber)$/;"	f
taskTerminate	sys/kernel.h	/^	void (*taskTerminate)(uint8_t);$/;"	m	struct:kernel
taskTerminate_	sys/kernel.cpp	/^void taskTerminate_(uint8_t taskNumber)$/;"	f
task_T	sys/kernel.h	/^}task_T;$/;"	t	typeref:struct:task
tasks	sys/kernel.h	/^	task_T tasks[MAX_NUMBER_OF_TASKS];$/;"	m	struct:kernel
terminated	sys/kernel.h	/^	terminated,$/;"	e	enum:state
testFunc	dev/sand.cpp	/^void testFunc()$/;"	f
testFunc	sys/tasks.cpp	/^void testFunc(char* arg)$/;"	f
testFunc2	sys/tasks.cpp	/^void testFunc2()$/;"	f
testFunc3	sys/tasks.cpp	/^void testFunc3()$/;"	f
testFunc4	sys/tasks.cpp	/^void testFunc4()$/;"	f
